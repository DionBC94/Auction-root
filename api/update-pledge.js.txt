const express = require('express');
const path = require('path');
const dotenv = require('dotenv');
const nodemailer = require('nodemailer');

dotenv.config(); // Load environment variables

const app = express();

// Middleware to parse JSON bodies
app.use(express.json());

// Serve static files from the 'public' directory
app.use(express.static(path.join(__dirname, '..', 'public')));

// Email transport setup using Nodemailer and ProtonMail Bridge credentials
const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,   // From .env file
  port: process.env.SMTP_PORT,   // From .env file
  secure: false,                 // ProtonMail Bridge handles encryption
  auth: {
    user: process.env.EMAIL_USER,  // From .env file
    pass: process.env.EMAIL_PASS,  // From .env file
  },
});

// Example API route for subscribing (handles POST requests)
app.post('/apisubscribe', (req, res) => {
  const { email } = req.body;

  // Basic email validation
  if (!email || !email.includes('@')) {
    return res.status(400).send('Invalid email address');
  }

  const mailOptions = {
    from: process.env.EMAIL_USER,    // Sender email
    to: email,                       // Recipient email
    subject: 'Pledge Notification',
    text: 'You will be notified if a pledge secures this fortnight.',
  };

  // Send email using Nodemailer
  transporter.sendMail(mailOptions, (error, info) => {
    if (error) {
      console.log(error);
      return res.status(500).send('Error sending email');
    }
    console.log('Email sent: ' + info.response);
    return res.status(200).send('Email sent successfully');
  });
});

// Example API route for updating pledges (POST request)
app.post('/apiupdate-pledge', (req, res) => {
  const { fortnightId, name, pledge } = req.body;

  // Simulate retrieving fortnight data (this could be from a database)
  let fortnight = { id: fortnightId, name, status: 'Unsecured', highestPledge: 0, email: null };

  // Log for debugging purposes
  console.log(`Received pledge update: ${JSON.stringify(req.body)}`);

  // Check if the new pledge is higher than the current highest pledge
  if (pledge > fortnight.highestPledge) {
    fortnight.highestPledge = pledge;
    fortnight.name = name;
    fortnight.status = 'Secured';

    // Send an email notification if the pledge is updated
    if (fortnight.email) {
      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: fortnight.email,
        subject: `Fortnight ${fortnight.id} Pledge Update`,
        text: `Your pledge has been usurped. New details:\nName: ${fortnight.name}\nHighest Pledge: EUR ${fortnight.highestPledge}`,
      };

      transporte
